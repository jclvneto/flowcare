// ---------- Prisma Setup ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum GlobalRole {
  ADMIN_MASTER
  USER
}

enum ClinicRole {
  CLINIC_ADMIN
  RECEPTIONIST
  VETERINARIAN
}

enum Species {
  DOG
  CAT
  BIRD
  RABBIT
  REPTILE
  OTHER
}

enum Sex {
  MALE
  FEMALE
  UNKNOWN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum AppointmentSource {
  WHATSAPP
  MANUAL
}

enum EncounterStatus {
  DRAFT
  CONFIRMED
}

enum MessageDirection {
  INBOUND
  OUTBOUND
}

enum MessageStatus {
  QUEUED
  SENT
  DELIVERED
  READ
  FAILED
}

// ---------- Core ----------
model User {
  id           String       @id @default(uuid())
  email        String       @unique
  phone        String?      @db.VarChar(30)
  name         String
  globalRole   GlobalRole   @default(USER)
  // perfil
  avatarUrl    String?
  timezone     String?      @db.VarChar(64)

  // relations
  memberships  ClinicMembership[]
  appointments Appointment[] @relation("AppointmentProvider")
  encounters   Encounter[]   @relation("EncounterProvider")
  createdAppts Appointment[] @relation("AppointmentCreator")
  clinicsOwned Clinic[]      @relation("ClinicOwner")

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

// Cada clínica é um tenant
model Clinic {
  id                     String              @id @default(uuid())
  name                   String
  legalName              String?
  whatsappNumber         String?             @db.VarChar(30)
  feedbackFormUrl        String?             // Google Forms
  country                String?             @db.VarChar(2)
  state                  String?             @db.VarChar(64)
  city                   String?             @db.VarChar(64)
  addressLine            String?
  zip                    String?             @db.VarChar(20)
  active                 Boolean             @default(true)

  // gestão
  ownerId                String?
  owner                  User?               @relation("ClinicOwner", fields: [ownerId], references: [id], onDelete: SetNull)

  // relations
  memberships            ClinicMembership[]
  owners                 Owner[]             // clientes (tutores)
  patients               Patient[]
  appointments           Appointment[]
  faqs                   FAQArticle[]
  threads                WhatsAppThread[]
  encounters             Encounter[]
  prescriptions          Prescription[]
  feedbacks              FeedbackSubmission[]

  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt

  @@index([active])
  @@unique([name])
}

model ClinicMembership {
  id        String      @id @default(uuid())
  clinicId  String
  userId    String
  role      ClinicRole
  active    Boolean     @default(true)

  clinic    Clinic      @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([clinicId, userId])
  @@index([userId, role])
  @@index([clinicId, role])
}

// ---------- Clientes (tutores) & Pacientes ----------
model Owner {
  id          String    @id @default(uuid())
  clinicId    String
  name        String
  phone       String?   @db.VarChar(30)
  email       String?   @unique
  notes       String?
  whatsappOptIn Boolean @default(true)

  clinic      Clinic    @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  patients    Patient[]
  threads     WhatsAppThread[]
  messages    WhatsAppMessage[]
  appointments Appointment[]
  feedbacks   FeedbackSubmission[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([clinicId])
  @@index([phone])
}

model Patient {
  id          String     @id @default(uuid())
  clinicId    String
  ownerId     String
  name        String
  species     Species
  sex         Sex        @default(UNKNOWN)
  breed       String?
  color       String?
  birthDate   DateTime?
  microchip   String?    @unique
  notes       String?

  clinic      Clinic     @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  owner       Owner      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  encounters  Encounter[]
  prescriptions Prescription[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([clinicId, ownerId])
  @@index([name])
}

// ---------- Agenda & Consulta ----------
model Appointment {
  id            String             @id @default(uuid())
  clinicId      String
  patientId     String
  ownerId       String
  providerId    String             // veterinário
  createdById   String?
  startsAt      DateTime
  endsAt        DateTime
  status        AppointmentStatus  @default(PENDING)
  source        AppointmentSource  @default(MANUAL)
  notes         String?

  clinic        Clinic             @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  patient       Patient            @relation(fields: [patientId], references: [id], onDelete: Restrict)
  owner         Owner              @relation(fields: [ownerId], references: [id], onDelete: Restrict)
  provider      User               @relation("AppointmentProvider", fields: [providerId], references: [id], onDelete: Restrict)
  createdBy     User?              @relation("AppointmentCreator", fields: [createdById], references: [id], onDelete: SetNull)
  encounter     Encounter?

  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  @@index([clinicId, startsAt])
  @@index([providerId, startsAt])
  @@index([ownerId])
  @@index([status])
}

model Encounter {
  id            String          @id @default(uuid())
  clinicId      String
  appointmentId String?         @unique
  patientId     String
  providerId    String
  status        EncounterStatus @default(DRAFT)
  signedAt      DateTime?
  // Campos estruturados do prontuário (JSON)
  chiefComplaint  Json?
  historyPresent  Json?
  physicalExam    Json?
  diagnosis       Json?
  plan            Json?
  vitals          Json?          // temperatura, peso etc.
  rawText         String?        // texto consolidado

  clinic        Clinic     @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  patient       Patient    @relation(fields: [patientId], references: [id], onDelete: Restrict)
  provider      User       @relation("EncounterProvider", fields: [providerId], references: [id], onDelete: Restrict)
  audios        EncounterAudio[]
  transcripts   EncounterTranscript[]
  prescription  Prescription?

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([clinicId, patientId])
  @@index([providerId])
  @@index([status])
}

model EncounterAudio {
  id          String    @id @default(uuid())
  encounterId String
  url         String
  durationSec Int?
  format      String?   @db.VarChar(16)
  sizeBytes   Int?

  encounter   Encounter @relation(fields: [encounterId], references: [id], onDelete: Cascade)

  createdAt   DateTime  @default(now())
}

model EncounterTranscript {
  id           String    @id @default(uuid())
  encounterId  String
  text         String
  model        String?   @db.VarChar(64) // ex: whisper-1
  language     String?   @db.VarChar(16)
  confidence   Float?
  segmentsJson Json?     // opcional: trechos temporais

  encounter    Encounter @relation(fields: [encounterId], references: [id], onDelete: Cascade)

  createdAt    DateTime  @default(now())
}

// ---------- Prescrição ----------
model Prescription {
  id           String     @id @default(uuid())
  clinicId     String
  encounterId  String     @unique
  patientId    String
  providerId   String
  notes        String?
  pdfUrl       String?
  sendToWhatsapp Boolean  @default(true)

  clinic       Clinic     @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  encounter    Encounter  @relation(fields: [encounterId], references: [id], onDelete: Cascade)
  patient      Patient    @relation(fields: [patientId], references: [id], onDelete: Restrict)
  provider     User       @relation(fields: [providerId], references: [id], onDelete: Restrict)
  items        PrescriptionItem[]

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([clinicId])
  @@index([providerId])
}

model PrescriptionItem {
  id              String       @id @default(uuid())
  prescriptionId  String
  drugName        String
  dosage          String?      // ex: 20mg
  frequency       String?      // ex: 2x/dia
  duration        String?      // ex: 7 dias
  route           String?      // ex: VO, IM, SC
  notes           String?

  prescription    Prescription @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)
}

// ---------- WhatsApp (chat + FAQ) ----------
model WhatsAppThread {
  id         String     @id @default(uuid())
  clinicId   String
  ownerId    String
  externalId String?    @unique // id da conversa no provedor

  clinic     Clinic     @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  owner      Owner      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  messages   WhatsAppMessage[]

  createdAt  DateTime   @default(now())

  @@index([clinicId, ownerId])
}

model WhatsAppMessage {
  id          String           @id @default(uuid())
  clinicId    String
  threadId    String
  ownerId     String
  direction   MessageDirection
  status      MessageStatus    @default(QUEUED)
  body        String?
  mediaUrl    String?
  sentAt      DateTime?
  deliveredAt DateTime?
  readAt      DateTime?

  clinic      Clinic           @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  thread      WhatsAppThread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  owner       Owner            @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  createdAt   DateTime         @default(now())

  @@index([clinicId, threadId])
  @@index([ownerId])
  @@index([direction, status])
}

model FAQArticle {
  id          String   @id @default(uuid())
  clinicId    String?  // null => global
  title       String
  slug        String
  body        String
  isActive    Boolean  @default(true)

  clinic      Clinic?  @relation(fields: [clinicId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([clinicId, slug])
  @@index([isActive])
}

// ---------- Feedback (Google Forms) ----------
model FeedbackSubmission {
  id             String    @id @default(uuid())
  clinicId       String
  ownerId        String?
  patientId      String?
  appointmentId  String?
  externalFormId String?   // ID/resposta do Google
  responseUrl    String?
  score          Int?
  comments       String?
  submittedAt    DateTime?

  clinic         Clinic    @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  owner          Owner?    @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  patient        Patient?  @relation(fields: [patientId], references: [id], onDelete: SetNull)
  appointment    Appointment? @relation(fields: [appointmentId], references: [id], onDelete: SetNull)

  createdAt      DateTime  @default(now())

  @@index([clinicId, submittedAt])
}
